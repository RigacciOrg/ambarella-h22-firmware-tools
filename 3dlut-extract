#!/usr/bin/python3
# -*- coding: utf-8 -*-
"""
Extract a 16x16x16 3D-LUT table from an Ambarella ROMFS file.

NOTICE: The saved image is a PNG 3x8-bit, where the original
colors are 3x10-bit instead.
"""

from PIL import Image, ImageDraw
import mmap
import os
import sys

__author__ = "Niccolo Rigacci"
__copyright__ = "Copyright 2021 Niccolo Rigacci <niccolo@rigacci.org>"
__license__ = "GPLv3-or-later"
__email__ = "niccolo@rigacci.org"
__version__ = "0.1.1"

LUT_SIZE = 16
BIT_MASK = 0b1111111111
DOT_SIZE = 8
BORDER = DOT_SIZE


def norm(val):
    # Normalize a 10-bit number to 8-bit.
    return int(float(val) / float(BIT_MASK) * 256.0)


if len(sys.argv) < 3:
    print('Usage: %s FILE OFFSET' % (os.path.basename(sys.argv[0]),))
    sys.exit(1)

firmware_file = sys.argv[1]
offset = int(sys.argv[2], 16)
lut_filename = '%s_lut-0x%08X.png' % (firmware_file, offset)

fw = open(firmware_file, "r+b")
f = mmap.mmap(fw.fileno(), 0)
f.seek(offset)

image_width = (LUT_SIZE * DOT_SIZE) * LUT_SIZE + BORDER * (LUT_SIZE + 1)
image_height = (LUT_SIZE * DOT_SIZE) + BORDER * 2
img = Image.new('RGB', (image_width, image_height), color = 'white')
for z in range(0, LUT_SIZE):
    for y in range(0, LUT_SIZE):
        for x in range(0, LUT_SIZE):
            int32 = int.from_bytes(f.read(4), 'little')
            red   = (int32 >>  0) & BIT_MASK
            green = (int32 >> 10) & BIT_MASK
            blue  = (int32 >> 20) & BIT_MASK
            print('(%4d, %4d, %4d), ' % (red, green, blue), end='')
            #print('(%3x, %3x, %3x), ' % (red, green, blue))
            fill_color = 'rgb(%d,%d,%d)' % (norm(red), norm(green), norm(blue))
            x0 = BORDER + x * DOT_SIZE + z * (DOT_SIZE * LUT_SIZE + BORDER)
            y0 = BORDER + (LUT_SIZE - y - 1) * DOT_SIZE
            square = ImageDraw.Draw(img)
            square.rectangle([x0, y0, x0 + DOT_SIZE, y0 + DOT_SIZE], fill=fill_color)
        print('')
    print('')
print('')
img.save(lut_filename)

file_pointer = f.tell()
f.seek(0, 2)
file_end = f.tell()
print('LUT: start: 0x%08X, size: %d, end: 0x%08X - File end: 0x%08X, remaining bytes: %d' % (offset, 4 * (LUT_SIZE ** 3), file_pointer, file_end, file_end - file_pointer))
